#--------------------------------------------------------------------------------------------------
# Program Name:           Lychee
# Program Description:    MEI document manager for formalized document control
#
# Filename:               lychee/converters/lilypond.ebnf
# Purpose:                LilyPond EBNF grammar for TatSu
#
# Copyright (C) 2016 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
#
# NOTE for Lychee developers:
#
# The module "lychee.converters.lilypond_parser" is autogenerated from this file using TatSu.
#
# Run this command in this directory to regenerate the "lilypond_parser" module after you update
# the EBNF grammar specification:
# $ python -m tatsu -c -o lilypond_parser.py lilypond.ebnf

@@comments :: /\%\{.*?\%\}/
@@eol_comments :: /%(|[^{].*?)$/
@@grammar :: LilyPond
@@left_recursion :: False
@@parseinfo :: False

# Invalid note names.
@@keyword :: q r s R


start = {top_level_expression}* $;


# Document
##########
version_statement =
    ly_type:`version`
    '\\version' '"' version:'.'.{ /[0-9]*/ } '"'
    ;

language_statement =
    ly_type:`language`
    '\\language' '"' language:/[^"]*/ '"'
    ;


# Staff Settings
################

instr_name =
    ly_type:`instr_name` '\\set' 'Staff.instrumentName' ~ '=' '"' name:/[A-Z a-z0-9&]*/ '"'
    ;

clef =
    ly_type:`clef` '\\clef' ~ '"' type:( 'bass' | 'tenor' | 'alto' | 'treble' ) '"'
    ;

key =
    ly_type:`key` '\\key' ~ keynote:pitch_name '\\' mode:( "major" | "minor" )
    ;

time_numerator = /[1-9][0-9]?/ ;
time =
    ly_type:`time` '\\time' ~ count:time_numerator '/' unit:duration_number
    ;

staff_setting =
    clef | key | time | instr_name
    ;


# Nodes: notes, rests, chords, spacers
######################################

@name
pitch_name = /[a-z]+/ ;

octave =
    ",," | "," | "'''''" | "''''" | "'''" | "''" | "'"
    ;

accidental_force =
    '?' | '!'
    ;

duration_number =
    '512' | '256' | '128' | '64' | '32' | '16' | '8' | '4' | '2' | '1'
    ;

duration_dots =
    {'.'}*
    ;

duration =
    ( dur:duration_number dots:duration_dots ) |
    ( dur:() dots:{} )
    ;

tie =
    ly_type:`tie`
    '~'
    ;

slur =
    ly_type:`slur`
    slur: ('(' | ')')
    ;

post_event =
    tie | slur
    ;

notehead =
    pitch_name:pitch_name ~
    [oct:octave]
    [accid_force:accidental_force]
    ;

note =
    ly_type:`note`
    >notehead
    >duration
    post_events:{post_event}*
    ;

chord_note =
    ly_type:`note`
    >notehead
    post_events:{post_event}*
    ;

chord =
    ly_type:`chord`
    '<' !'<'
    notes:{chord_note}*
    '>'
    >duration
    post_events:{post_event}*
    ;

rest =
    ly_type:`rest` /r/ >duration post_events:{post_event}*
    ;

measure_rest =
    ly_type:`measure_rest` /R/ >duration post_events:{post_event}*
    ;

spacer =
    ly_type:`spacer` /s/ >duration post_events:{post_event}*
    ;

barcheck = ly_type:`barcheck` '|' ;

music_node = note | rest | spacer | measure_rest | chord | barcheck ;
nodes = { >music_node | >staff_setting }+ ;


# Layers
########

unmarked_layer =
    nodes
    ;
marked_layer =
    '{' @:nodes '}'
    ;

monophonic_layers =
    layers+:unmarked_layer
    ;
polyphonic_layers =
    simul_l layers:( '\\\'.{marked_layer} ) simul_r
    ;


# Staff and Music Block
#######################

brace_l = '{' ;
brace_r = '}' ;

staff_content =
    initial_settings:{staff_setting}*
    content:{( monophonic_layers | polyphonic_layers )}+
    ;

token_new = '\\new' ;
token_staff = 'Staff' ;
staff =
    ly_type:`staff`
    token_new token_staff brace_l
        >staff_content
    brace_r
    ;


# Score and Layout
##################

simul_l = '<<' ;
simul_r = '>>' ;

score_staff_content =
    simul_l ~ @:{staff}+ simul_r
    | @:staff
    ;

header_block = "\\header" brace_l brace_r ;

layout_block = "\\layout" brace_l brace_r ;

paper_block = "\\paper" brace_l brace_r ;

token_score =
    '\\score'
    | '\\new' 'Score'
    ;

score =
    ly_type:`score`
    version:[version_statement]
    token_score
    (
        staves:score_staff_content
        |
        brace_l
            staves:score_staff_content
            [layout_block:layout_block]
        brace_r
        |
        brace_l
            token_score
            staves:score_staff_content
        brace_r
    )
    ;

top_level_expression =
    version_statement
    | language_statement
    | header_block
    | layout_block
    | paper_block
    | score
    | staff
    ;
