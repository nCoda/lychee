#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#--------------------------------------------------------------------------------------------------
# Program Name:           Lychee
# Program Description:    MEI document manager for formalized document control
#
# Filename:               lychee/converters/lilypond.ebnf
# Purpose:                LilyPond EBNF grammar for Grako
#
# Copyright (C) 2016 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
#
# NOTE for Lychee developers:
#
# The module "lychee.converters.lilypond_parser" is autogenerated from this file using Grako.
#
# Run this command in this directory to regenerate the "lilypond_parser" module after you update
# the EBNF grammar specification:
# $ python -m grako -c -o lilypond_parser.py lilypond.ebnf

@@grammar :: LilyPond
@@comments :: /\%\{.*?\%\}/


start = score;


# Document
##########
version_stmt =
    '\\version' '"' @:'.'.{ /[0-9]*/ } '"'
    ;


# Staff Settings
################

instr_name =
    ly_type:`instr_name` '\\set' 'Staff.instrumentName' '=' '"' instrument_name:/[A-Z a-z]*/ '"'
    ;

clef =
    ly_type:`clef` '\\clef' '"' type:( 'bass' | 'tenor' | 'alto' | 'treble' ) '"'
    ;

key =
    ly_type:`key` '\\key' keynote:note_name [accid:accidental_symbol] '\\' mode:( "major" | "minor" )
    ;

time_numerator = /[1-9][0-9]?/ ;
time =
    ly_type:`time` '\\time' count:time_numerator '/' unit:duration_number
    ;

staff_setting =
    clef | key | time | instr_name
    ;


# Nodes: notes, rests, spacers
##############################

note_name =
    /a/ | /b/ | /c/ | /d/ | /e/ | /f/ | /g/
    ;

octave =
    ",," | "," | "'''''" | "''''" | "'''" | "''" | "'"
    ;

accidental_symbol = /is/ | /es/ ;
accidental = {accidental_symbol}+ ;

accidental_force =
    '?' | '!'
    ;

duration_number =
    '512' | '256' | '128' | '64' | '32' | '16' | '8' | '4' | '2' | '1'
    ;

duration_dots =
    {'.'}*
    ;

duration =
    number:duration_number [dots:duration_dots]
    ;

note =
    ly_type:`note`
    note_name:note_name
    [accidental:accidental]
    [octave:octave]
    [accidental_force:accidental_force]
    duration:duration
    ;

rest =
    ly_type:`rest` /r/ duration:duration
    ;

spacer =
    ly_type:`spacer` /s/ duration:duration
    ;

node = note | rest | spacer | staff_setting ;
nodes = {node}+ ;


# Measure and Barcheck
######################

barcheck = ly_type:`barcheck` '|' ;
measure = measure:( nodes barcheck ) ;
measures = {measure}*;


# Staff and Music Block
#######################

brace_l = '{' ;
brace_r = '}' ;

music_block =
    brace_l measures:measures brace_r
    ;

token_new = '\\new' ;
token_staff = 'Staff' ;
staff =
    token_new token_staff staff:music_block
    ;


# Score and Layout
##################

simul_l = '<<' ;
simul_r = '>>' ;

score_staff_content = simul_l @:{staff}+ simul_r ;

layout_block = "\\layout" brace_l brace_r ;

token_score = '\\score' ;
score =
    version:[version_stmt]
    token_score brace_l
        score:score_staff_content
        [layout_block:layout_block]
    brace_r
    ;
